import datetime
import numpy as np
import pandas as pd
import Queue

from abc import ABCMeta, abstractmethod
from event import SignalEvent

class Strategy(object):
    """ Strategy is an abstract base class providing an interface for all subsequent (inherited)
        strategy handling objects.

        The goal of a derived Strategy object is to generate Signal objects for particular
        symbols based on the inputs of Bars (OHLCVI) generated by a DataHandler object.

        This is designed to work both with historic and live data as the Strategy object is agnostic
        to the data source, since it obtains the bar tuples from a queue object."""

    __metaclass__ = ABCMeta

    @abstractmethod
    def calculate_signals(self):
        """ Provides the mechanisms to calculate the lsit of signals. """
        raise NotImplementedError("Should implement calculate_signals()")


class BuyAndHoldStrategy(Strategy):
    """ Goes LONG all of the symbols as soon as a bar is received.  It will never exit a position.
        Used for testing the class and maybe as a benchmark. """

    def __init__(self, bars, events):
        """ Initialises the buy and hold strategy.

            Parameters:
            bars - The DataHandler object that provides bar information
            events - The Event Queue object. """

        self.bars = bars
        self.symbol_list = self.bars.symbol_list
        self.events = events

        # Once the buy & hold signal is given, these are set to True
        self.bought = self.calculate_initial_bought()

    def calculate_initial_bought(self):
        """ Adds keys to the bought dictionary for all symbols and sets them to False. """

        bought = {}
        for s in self.symbol_list:
            bought[s] = False
        return bought

    def calculate_signals(self, event):
        """ For 'Buy and Hold' we generate a single signal per symbol and then
            no additional signals.  This means we are constantly long the market
            from the date of strategy initialisation.

            Parameteres:
            event - A MarketEvent object. """

        if event.type == 'MARKET':
            for s in self.symbol_list:
                bars = self.bars.get_latest_bars(s, N = 1)
                if bars is not None and bars != []:
                    if self.bought[s] == False:
                        # (Symbol, Datetime, Type = LONG , SHORT or EXIT)
                        signal = SignalEvent(bars[0][0], bars[0][1], 'LONG')
                        self.events.put(signal)
                        self.bought[s] = Ture

        
